from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7435741097:AAEVsd3t6sgkNUQoAWAO8NKvhdMmfCVv0S4'
# –í–∞—à ID (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
ADMIN_ID = 1604384939

# URL MockAPI
MOCKAPI_URL = 'https://6703f9f6ab8a8f8927327c94.mockapi.io/chat_users'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat.id
    message_text = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ MockAPI
    async with aiohttp.ClientSession() as session:
        async with session.post(MOCKAPI_URL, json={"user_id": user_id, "message": message_text}) as response:
            if response.status == 201:
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}')
                await update.message.reply_text(
                    '‚úâÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç.\n'
                    '–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üåü'
                )
            else:
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')

async def forward_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat.id == ADMIN_ID:
        if update.message.text:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            parts = update.message.text.split(maxsplit=1)
            user_id = int(parts[0]) if len(parts) > 0 and parts[0].isdigit() else None
            message_to_user = parts[1] if len(parts) > 1 else ""

            if user_id is not None:
                async with aiohttp.ClientSession() as session:
                    async with session.get(MOCKAPI_URL) as response:
                        if response.status == 200:
                            messages = await response.json()
                            user_messages = [msg for msg in messages if msg['user_id'] == user_id]

                            if user_messages:
                                if message_to_user:
                                    await context.bot.send_message(chat_id=user_id, text=f'üìù –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_to_user}')
                                    await context.bot.send_message(chat_id=ADMIN_ID, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}:\n\n{message_to_user}')
                                else:
                                    await context.bot.send_message(chat_id=ADMIN_ID, text='–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
                            else:
                                await context.bot.send_message(chat_id=ADMIN_ID, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.')
                        else:
                            await context.bot.send_message(chat_id=ADMIN_ID, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç MockAPI.')
        elif update.message.document:  # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            user_id = int(update.message.caption.split()[0]) if update.message.caption else None
            if user_id is not None:
                await context.bot.send_document(chat_id=user_id, document=update.message.document.file_id)
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.')
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É.')
        elif update.message.photo:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
            user_id = int(update.message.caption.split()[0]) if update.message.caption else None
            if user_id is not None:
                await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.')
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.')
    else:
        await update.message.reply_text('–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.User(ADMIN_ID), forward_user_message))

    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.User(ADMIN_ID) & filters.TEXT, forward_admin_message))
    # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.User(ADMIN_ID) & filters.Document.ALL, forward_admin_message))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    # –î–ª—è —Ñ–æ—Ç–æ
    # application.add_handler(MessageHandler(filters.User(ADMIN_ID) & filters.Photo.ALL, forward_admin_message))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

    application.run_polling()

if __name__ == '__main__':
    main()
